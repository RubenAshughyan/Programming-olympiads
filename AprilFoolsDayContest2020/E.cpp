#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <algorithm>
#include <stack>
#include <cmath>
#include <vector>
#include <set>
#include <map>
#include <unordered_set>
#include <unordered_map>
#include <queue>
#include <ctime>
#include <cassert>
#include <complex>
#include <string>
#include <cstring>
#include <chrono>
#include <random>
#include <queue>
#include <bitset>

//#include "rubo.h"
#define MP make_pair
#define PB push_back
#define in int
#define ll long long
#define ull unsigned long long
#define vc vector
#define SQ(j) (j)*(j)
#define ch first
#define range second
//
//#define ld long double
#define dbl  double
#define pll pair<long long,long long>
#define pii pair<int,int>
#define sz(xxx) ((int)(xxx.size()))
#define all(j) j.begin(), j.end()
#define loop(xxx, yyy) for(int xxx = 0; xxx < yyy; xxx++)
//#define printf(fmt, ...) (0)
//#define HOME
//#define y0 ngacaleiebinvoaeu
//#define y1 gnarpipipaigare
#define j1 adsfndnasfafoasp

//#define printf(...) (0)
#define db(x) if(DEBUG) {cout << #x << " = " << x << endl;}
#define dbCont(x) if(DEBUG) {cout << #x << ": "; for(auto shun: x) cout << shun << ' '; cout<<endl;}


using namespace std;

template<class K, class V>
ostream &operator<<(ostream &out, pair<K, V> &elem) {
    out << "{" << elem.first << "," << elem.second << "}";
    return out;
}


int DEBUG = 1;

using namespace std;


const int N = 1000;
int n;

int used[N][N];
int di[] = {0, 1, 0, -1};
int dj[] = {1, 0, -1, 0};

bool ins(int i, int j) {
    return
            0 <= i && i < n &&
            0 <= j && j < n;
}

int f(int i) {
    dbl sqrLen = (n + 0.0) / 64.0;

    return round(i * sqrLen + sqrLen / 2.0);
}

int main() {
//

/*
    freopen("../AprilFoolsDayContest2020/nkar.txt", "r", stdin);
    string s;

    vc<string> v;
    while (cin >> s) {
        v.PB(s);
    }


    n = v.size();

    db(v.size());
    db(v[0].size());

    n = 963;

    loop(i, n) {
        loop(j, n) {
                if((i%(n-1)) == 0 && (j%(n-1) == 0) && v[i][j] == '1'){



                queue<int> q;
                q.push(i);
                q.push(j);
                used[i][j] = 1;


                while (!q.empty()) {

                    int f_i = q.front();
                    q.pop();
                    int f_j = q.front();
                    q.pop();
//        db(f_i);
//        db(f_j);

                    loop(d, 4) {
                        int to_i = f_i + di[d];
                        int to_j = f_j + dj[d];

//            db(to_i);
//            db(to_j);

                        if (ins(to_i, to_j) && v[to_i][to_j] == '1' && !used[to_i][to_j]) {
                            used[to_i][to_j] = 1;
                            q.push(to_i);
                            q.push(to_j);
                        }
                    }
                }
            }
        }
    }
    vc<vc<int>> ans(64, vc<int>(64, 0));
//
    loop(i, 64) {
        loop(j, 64) {
//            cout << used[i][j];

            ans[i][j] = used[f(i)][f(j)];
//
            cout << ans[i][j];
        }
        cout << endl;
    }
//

*/

vc<string> ans = {
        "1111111111111111111111111101010000001011111111111111111111111111",
        "1111111111111111111111010001010101101000001111111111111111111111",
        "1111111111111111111100010111011100101111011011111111111111111111",
        "1111111111111111100001010100000111100001010001011111111111111111",
        "1111111111111111001111110101111100001111010101001111111111111111",
        "1111111111111101100100000100010001011010011101101011111111111111",
        "1111111111111000110110111111010111000011001001001001111111111111",
        "1111111111100000010010010001000100011110011011011100011111111111",
        "1111111111000000000000111101111101110100110010010110001111111111",
        "1111111110000000000000000000010000000110000110000000000111111111",
        "1111111100000000000000000000000000000000000000000000000011111111",
        "1111111000000000000000000000000000000000000000000000000001111111",
        "1111111000000000000000000000000000000000000000000000000001111111",
        "1111110000000000000000000000000000000000000000000000000000111111",
        "1111100000000000000000000000000000000000000000000000000000011111",
        "1111100000000000000000000000000000000000000000000000000000011111",
        "1111000000000000000000000000000000000000000000000000000000001111",
        "1110000000000000000000000000000000000000000000000000000000000111",
        "1111100000000000000000000000000000000000000000000000000000000111",
        "1111111000000000000111011000000000000001110101000000000000011111",
        "1100111110000000001101110000000000000001011111110000000011111111",
        "1100001111100000111001011100000000000000010010011010011111110011",
        "1000000011111011100011000110000000000010110111001111111110000001",
        "1000000000111110110110010011100000000010010000011011110000000001",
        "1000000000000100100011111000110000000111011011110001000000000001",
        "1000000000111110111000100011100000000101000001011101101000000001",
        "0000000000001000101101101110110000001101101111001000111000000000",
        "0000000000011101101001000100010000101000100001100011101000000000",
        "0000000000010000001000011110110101111010110100001110001000000000",
        "0000000000011111011011000100011101010010010110111011011000000000",
        "0000000000001001000010010001110100011111000010100000010000000000",
        "0000000000011100011011011100010110001000011010001110111000000000",
        "0000000000000111110010001001000100111110110010011011101000000000",
        "0000000000000010010111101011110101101010010111001001000000000000",
        "0000000000001111000010101010100001001011010001100011100000000000",
        "0000000000000101101110001110000111011001111011001110000000000000",
        "0000000000000000111000111010010010010011010001011011000000000000",
        "0000000000000000001110100000011111000000011101110000000000000000",
        "1000000000000000011011110000010100000000000111011000000000000001",
        "1000000000000000000000000000000111100000000000000000000000000001",
        "1000000000000000000000000000101101000000000000000000000000000001",
        "1000000000000000000000000010111000000000000000000000000000000001",
        "1100000000000000000000000011101110000000000000000000000000000011",
        "1100000001100000000000000000001000000000000000000000000000000011",
        "1110000000101000000000000000011100000000000000000000010000000111",
        "1110000000111011100000000000110100000000000100000101111000000111",
        "1110000000101010110101110010100110101101001110011111010000000111",
        "1111000000001110011111011111110011100111111010110001000000001111",
        "1111100000001011000010000100011000111100010000010100000000011111",
        "1111100000000001011011011101000010001001011111011100000000011111",
        "1111110000000011110010010111101110101111000101110000000000111111",
        "1111111000000000100111000001001010111010011100000000000001111111",
        "1111111000000000110001101011100011101000110111000000000001111111",
        "1111111100000000011100001110001001000010000100000000000011111111",
        "1111111110000000001001111010111111011110100000000000000111111111",
        "1111111111000000000000101000010010010100110000000000001111111111",
        "1111111111100000000000001111000011110111100000000000011111111111",
        "1111111111111000000000000000000001000000000000000001111111111111",
        "1111111111111100000000000000000000000000000000000011111111111111",
        "1111111111111111000000000000000000000000000000001111111111111111",
        "1111111111111111100000000000000000000000000000011111111111111111",
        "1111111111111111111100000000000000000000000011111111111111111111",
        "1111111111111111111111000000000000000000001111111111111111111111",
        "1111111111111111111111111100000000000011111111111111111111111111",
};


//    while(1) {
        int i,j;
        cin >> i >> j;
        cout << (ans[i][j]=='1' ? "OUT" : "IN") << endl;
//    }
////



//    int i, j;
//    cin >> i >> j;
//    if (X[i][j] == '1') {
//        cout << "OUT" << endl;
//    } else { cout << "IN"; }

//    main();
    return 0;
}


/*
 * Here is the list
 * of the most important features
 * that you might heard of so I
 * would like to ask about the
 * single response variables that
 * can ever be considered for the
 * future generations in terms of
 * people's overall general lives.
 * Mostly I can't agree to the
 * desired behavior sp lets never
 * forget if in case of fire the
 * basements of buildings add a
 * slight discrepancy conserning
 * the unvaluable need to flush
 * midst the evenings flow never
 * asking why.
 */



