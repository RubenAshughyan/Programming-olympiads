#include<bits/stdc++.h>

//#include "rubo.h"
#define MP make_pair
#define PB push_back
#define in int
#define ll long long
#define ull unsigned long long
#define vc vector
#define SQ(j) (j)*(j)
//#define i first
//#define j second

//#define ld long double
#define dbl  double
#define pll pair<long long,long long>
#define pii pair<int,int>
#define all(j) j.begin(), j.end()
#define loop(xxx, yyy) for(int xxx = 0; xxx < yyy; xxx++)
//#define printf(fmt, ...) (0)
//#define HOME
//#define y0 ngacaleiebinvoaeu
//#define y1 gnarpipipaigare
#define j1 adsfndnasfafoasp

//#define printf(...) (0)
#define db(x) cout << #x << " = " << x << endl
#define dbCont(x) cout << #x << ": "; for(auto shun: x) cout << shun << ' '; cout<<endl;

using namespace std;

int n, k;
vector<vector<int>> stacks;
vector<pii> ans;
vector<int> top_block_sizes, bottom_block_sizes;

int A = 0;
void move(int from, int to) {
    A++;
    assert(A <= 13*n);

    ans.emplace_back(from, to);
    stacks[to].PB(stacks[from].back());
    stacks[from].pop_back();
}

void operate(int destId) {
    set<pii> tops;
    for(int i = 0; i < k; i++) {
        if (i == destId || stacks[i].empty()) continue;
        tops.emplace(stacks[i].back(), i);
    }

    top_block_sizes.PB(tops.size());
    for(auto& pr : tops) {
        move(pr.second, destId);
    }
}

void freeUp(int freeId) {
    int to = 0;
    while(!stacks[freeId].empty()) {
        to %= k;
        if (to == freeId) { to++; continue; }
        move(freeId, to);
        to++;
    }
}

void fillEmptyStacks(int from) {
    vector<int>& sizes = (from == 0 ? top_block_sizes : bottom_block_sizes);
    for(int i = 1; i < k - 1; i++) {
        if (sizes.empty()) break;
        for(int j = 0; j < sizes.back(); ++j)
            move(from, i);
        sizes.pop_back();
    }
}

void mergeInto(int to) {
    set<pii> tops;
    for(int i = 1; i < k - 1; i++) {
        if (stacks[i].empty()) continue;
        tops.emplace(stacks[i].back(), i);
    }
    int sz = 0;

    while(!tops.empty()) {
        auto it = tops.begin();
        int stId = it->second;
        tops.erase(it);
        move(stId, to);
        sz++;

        if (!stacks[stId].empty())
            tops.emplace(stacks[stId].back(), stId);
    }
    if (to == 0)    top_block_sizes.PB(sz);
    else            bottom_block_sizes.PB(sz);
}


void fromEndToEnd(int from, int to) {
    if (from == 0) {
        while(!top_block_sizes.empty()) {
            fillEmptyStacks(from);
            mergeInto(to);
        }
    }
    else {
        while(!bottom_block_sizes.empty()) {
            fillEmptyStacks(from);
            mergeInto(to);
        }
    }
}

void normalize() {
    int normal = n / k;
    for(int i = 0; i < k; i++) {
        if (stacks[i].size() <= normal) continue;
        for(int j = 0; j < k && stacks[i].size() > normal; j++)
            if (stacks[j].size() < normal) {
                move(i, j);
                j--;
            }
    }
}

int main() {
//    cin >> n >> k;
//    stacks.resize(k);
//    for(int i = 0; i < k; i++) {
//        int cnt;
//        cin >> cnt;
//        stacks[i].resize(cnt);
//        for(int j = cnt - 1; j >= 0; --j)
//            cin >> stacks[i][j];
//    }
    k = 81;
    n = 25 * k;
    stacks.resize(k);
    stacks[0] = vector<int>{};
    normalize();

    freeUp(0);
//
//    for(int i = 0; i < k; i++, cout << endl)
//        for(int elem : stacks[i])
//            cout << elem << " ";


    int mx_len = stacks[1].size();
    for(int i = 0; i < mx_len; i++) {
        operate(0);
    }

    int now = 0;
    while(true) {
        if ((now == 0 && top_block_sizes.size() == 1) ||
                (now == k - 1 && bottom_block_sizes.size() == 1))
            break;
        int then = k - 1 - now;
        fromEndToEnd(now, then);
        now = then;
    }
//    cout << "-------------------------------------\n";
//    for(int i = 0; i < k; i++, cout << endl)
//        for(int elem : stacks[i])
//            cout << elem << " ";

    if (now == 0) {
        for(int i = k - 1; i > 0; i--) {
            for(int j = 0; j < n / k; j++)
                move(now, i);
        }
        for(int j = 0; j < n / k; j++)
            move(now, 1);
        for(int j = 0; j < n / k; j++)
            move(1, 2);
        for(int j = 0; j < n / k; j++)
            move(2, now);
    }
    else {
        for(int j = 0; j < n / k; j++) {
            move(now, 0);
        }
        for(int i = k - 1; i > 0; i--) {
            for(int j = 0; j < n / k; j++)
                move(now, i);
        }
        for(int j = 0; j < n / k; j++)
            move(0, 1);
        for(int j = 0; j < n / k; j++)
            move(now, 0);

        for(int j = 0; j < n / k; j++)
            move(1, now);
    }


    vc<int> sax;
    for(auto stck : stacks) {
        assert(stck.size() == n / k);
        reverse(all(stck));
        for(int e : stck){
            sax.push_back(e);
        }
    }
    assert(is_sorted(all(sax)));


    cout << ans.size() << endl;
    for(auto& move : ans)
        cout << move.first + 1 << " " << 1 + move.second << "\n";


//    cout << "-------------------------------------\n";
//    for(int i = 0; i < k; i++, cout << endl)
//        for(int elem : stacks[i])
//            cout << elem << " ";
    /*
    fillEmptyStacks(0);
    cout << "-------------------------------------\n";
    for(int i = 0; i < k; i++, cout << endl)
        for(int elem : stacks[i])
            cout << elem << " ";
    mergeInto(k - 1);
    cout << "-------------------------------------\n";
    for(int i = 0; i < k; i++, cout << endl)
        for(int elem : stacks[i])
            cout << elem << " ";
    dbCont(bottom_block_sizes);
*/

    return 0;

}